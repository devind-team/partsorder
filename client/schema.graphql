# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type FileUploadType {
  fileName: String!
  bucket: String!
  name: String!
  presignedUrl: String!
}

type UserCountAggregate {
  id: Int!
  username: Int!
  email: Int!
  avatar: Int!
  lastName: Int!
  firstName: Int!
  sirName: Int!
  active: Int!
  phone: Int!
  birthday: Int!
  role: Int!
  gender: Int!
  createdAt: Int!
  updatedAt: Int!
  managerId: Int!
  _all: Int!
}

type UserAvgAggregate {
  id: Float
  managerId: Float
}

type UserSumAggregate {
  id: Int
  managerId: Int
}

type UserMinAggregate {
  id: Int
  username: String
  email: String
  avatar: String
  lastName: String
  firstName: String
  sirName: String
  active: Boolean
  phone: String
  birthday: DateTime
  role: Role
  gender: Gender
  createdAt: DateTime
  updatedAt: DateTime
  managerId: Int
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Role {
  USER
  ADMIN
}

enum Gender {
  UNKNOWN
  MALE
  FEMALE
}

type UserMaxAggregate {
  id: Int
  username: String
  email: String
  avatar: String
  lastName: String
  firstName: String
  sirName: String
  active: Boolean
  phone: String
  birthday: DateTime
  role: Role
  gender: Gender
  createdAt: DateTime
  updatedAt: DateTime
  managerId: Int
}

"""Модель статусов заказов"""
type Status {
  """Идентификатор статуса"""
  id: ID!

  """Статус"""
  status: OrderStatus!

  """Дата добавления статуса"""
  createdAt: DateTime!
  orderId: Int!
  userId: Int

  """Заказ"""
  order: Order!

  """Пользователь"""
  user: User
}

"""Статусы заказов"""
enum OrderStatus {
  CREATED
  APPROVAL
  APPROVED
  PURCHASING
  DELIVERY
  CLOSED
}

type CommentCount {
  comments: Int!
}

"""Комментарии к заказу"""
type Comment {
  """Идентификатор комментария"""
  id: ID!

  """Текст комментария"""
  text: String!

  """Дата создания"""
  createdAt: DateTime!
  orderId: Int!
  userId: Int
  parentId: Int

  """Заказ"""
  order: Order!

  """Пользователь добавил"""
  user: User

  """Комментарии по дереву"""
  comment: Comment
  comments: [Comment!]
  _count: CommentCount!
}

type OrderCount {
  statuses: Int!
  item: Int!
  comments: Int!
}

"""Заказ пользователя"""
type Order {
  """Идентификатор заказа"""
  id: ID!

  """Адрес доставки"""
  address: String

  """Дата создания"""
  createdAt: DateTime!
  userId: Int!
  managerId: Int

  """Пользователь, которые создал заказ"""
  user: User!

  """Менеджер заказа"""
  manager: User
  statuses: [Status!]
  item: [Item!]
  comments: [Comment!]
  _count: OrderCount!
}

"""Модель статусов товара в заказе"""
type StatusItem {
  """Идентификатор статуса"""
  id: ID!

  """Статус товара"""
  status: ItemStatus!

  """Дата добавления статуса"""
  createdAt: DateTime!
  itemId: Int!
  userId: Int

  """Товар"""
  item: Item!

  """Пользователь"""
  user: User
}

"""Статус товара"""
enum ItemStatus {
  CREATED
  APPROVED
  PURCHASED
  EUSTOCK
  DELIVERY
  RUSTOCK
  COMPLETED
}

type CommentItemCount {
  comments: Int!
}

"""Комментарии к заказу"""
type CommentItem {
  """Идентификатор комментария"""
  id: ID!

  """Текст комментария"""
  text: String!

  """Дата создания"""
  createdAt: DateTime!
  itemId: Int!
  userId: Int
  parentId: Int

  """Заказ"""
  item: Item!

  """Пользователь добавил"""
  user: User

  """Комментарии по дереву"""
  comment: CommentItem
  comments: [CommentItem!]
  _count: CommentItemCount!
}

type ItemCount {
  statuses: Int!
  commentItem: Int!
}

"""Модель товара"""
type Item {
  """Идентификатор позиции заказа"""
  id: ID!

  """Количество"""
  quantity: Int!

  """Номер машины"""
  carNo: String

  """Номер рейса"""
  routeNo: String

  """Тип доставки"""
  deliveryType: DeliveryType

  """Дата создания"""
  createdAt: DateTime!

  """Дата изменения позиции заказа"""
  updatedAt: DateTime!
  orderId: Int!
  productId: Int!
  priceId: Int
  userId: Int

  """Заказ"""
  order: Order!

  """Продукт"""
  product: Product!

  """Стоимость товара"""
  price: Price

  """Пользователь добавил"""
  user: User

  """Статусы товара"""
  statuses: [StatusItem!]
  commentItem: [CommentItem!]
  _count: ItemCount!
}

enum DeliveryType {
  RORO
  TURKIYE
  KAZAKHSTAN
  LITHUANIA
}

type PriceCount {
  item: Int!
}

"""Цены на товар"""
type Price {
  """Идентификатор ценового предложения"""
  id: ID!

  """Цена за единицу/штуку"""
  price: Decimal!

  """Срок поставки в днях"""
  duration: String

  """Название поставщика"""
  supplierName: String!

  """Страна поставщика"""
  country: String

  """Сайт"""
  site: String

  """Комментарий"""
  comment: String

  """Дата создания"""
  createdAt: DateTime!

  """Дата обновления"""
  updatedAt: DateTime!

  """Дата действия цены"""
  validAt: DateTime
  productId: Int!

  """Продукт товара"""
  product: Product!
  item: [Item!]
  _count: PriceCount!
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

type AttributeCount {
  products: Int!
}

"""Модель атрибутов товара"""
type Attribute {
  """Идентификатор атрибута"""
  id: ID!

  """Название атрибута"""
  name: String!

  """Дата создания"""
  createdAt: DateTime!

  """Продукты"""
  products: [AttributeValue!]
  _count: AttributeCount!
}

"""Модель значений атрибутов товара"""
type AttributeValue {
  """Идентификатор атрибута"""
  id: ID!

  """Название атрибута"""
  value: String!

  """Дата создания"""
  createdAt: DateTime!
  productId: Int!
  attributeId: Int!

  """Товар"""
  product: Product!

  """Атрибут"""
  attribute: Attribute!
}

type ProductCount {
  prices: Int!
  attributes: Int!
  item: Int!
  images: Int!
}

"""Список доступных товаров"""
type Product {
  """Идентификатор товара"""
  id: ID!

  """Артикул"""
  vendorCode: String!

  """Название"""
  name: String

  """Производитель"""
  manufacturer: String

  """Псевдонимы через запятую"""
  aliases: String

  """Оригинальность товара"""
  original: Boolean!

  """Товаров на складе"""
  stock: Int!

  """Дата создания продукта"""
  createdAt: DateTime!

  """Дата последнего изменения продукта"""
  updatedAt: DateTime!

  """Цены на товар"""
  prices: [Price!]

  """Атрибуты товаров"""
  attributes: [AttributeValue!]

  """Товары в заказах"""
  item: [Item!]

  """Изображения товара"""
  images: [File!]
  _count: ProductCount!
}

type FileCount {
  products: Int!
}

type File {
  """Идентификатор файла"""
  id: ID!

  """Название файла"""
  name: String!

  """Название сервиса, на котором расположен файл"""
  serverUrl: String!

  """Название баскета для хранения файла"""
  bucket: String!

  """Название файла в баскете"""
  key: String!

  """Дата создания"""
  createdAt: DateTime!

  """Дата обновления"""
  updatedAt: DateTime!
  userId: Int

  """Файл пользователя, если null - файл системный"""
  user: User
  products: [Product!]
  _count: FileCount!
}

type User {
  """Идентификатор пользователя"""
  id: ID!

  """Логин пользователя"""
  username: String!

  """Email пользователя"""
  email: String!

  """Аватар пользователя"""
  avatar: String

  """Фамилия"""
  lastName: String!

  """Имя"""
  firstName: String!

  """Отчество"""
  sirName: String

  """Флаг активности пользователя"""
  active: Boolean!

  """Номер телефона"""
  phone: String

  """День рожденья"""
  birthday: DateTime

  """Роль пользователя"""
  role: Role!

  """Пол пользователя"""
  gender: Gender!

  """Дата регистрации пользователя"""
  createdAt: DateTime!

  """Дата обновления"""
  updatedAt: DateTime!

  """Идентификатор менеджера"""
  managerId: Int
  manager: User
  users: [User!]

  """Мои файлы"""
  files: [File!]

  """Мои заказы"""
  orders: [Order!]

  """Заказы за которые пользователь отвечает"""
  manageOrders: [Order!]
  status: [Status!]
  item: [Item!]
  statusItem: [StatusItem!]
  comment: [Comment!]
  commentItem: [CommentItem!]
}

type UserLoginType {
  accessToken: String!
  user: User!
}

type OrderCountAggregate {
  id: Int!
  address: Int!
  createdAt: Int!
  userId: Int!
  managerId: Int!
  _all: Int!
}

type OrderAvgAggregate {
  id: Float
  userId: Float
  managerId: Float
}

type OrderSumAggregate {
  id: Int
  userId: Int
  managerId: Int
}

type OrderMinAggregate {
  id: Int
  address: String
  createdAt: DateTime
  userId: Int
  managerId: Int
}

type OrderMaxAggregate {
  id: Int
  address: String
  createdAt: DateTime
  userId: Int
  managerId: Int
}

type CreateOrderType {
  order: Order!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type OrderEdge {
  cursor: String!
  node: Order!
}

type OrderConnectionType {
  edges: [OrderEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  me: User!
  presignedPutUrl(fileName: String!): FileUploadType!
  orders(where: OrderWhereInput, orderBy: [OrderOrderByWithRelationInput!], cursor: OrderWhereUniqueInput, take: Int, skip: Int, distinct: [OrderScalarFieldEnum!], after: String, before: String, first: Int, last: Int): OrderConnectionType!
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IntFilter
  address: StringNullableFilter
  createdAt: DateTimeFilter
  userId: IntFilter
  managerId: IntNullableFilter
  user: UserRelationFilter
  manager: UserRelationFilter
  statuses: StatusListRelationFilter
  item: ItemListRelationFilter
  comments: CommentListRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IntFilter
  username: StringFilter
  password: StringFilter
  email: StringFilter
  avatar: StringNullableFilter
  lastName: StringFilter
  firstName: StringFilter
  sirName: StringNullableFilter
  active: BoolFilter
  phone: StringNullableFilter
  birthday: DateTimeNullableFilter
  role: EnumRoleFilter
  gender: EnumGenderFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  managerId: IntNullableFilter
  manager: UserRelationFilter
  users: UserListRelationFilter
  files: FileListRelationFilter
  orders: OrderListRelationFilter
  manageOrders: OrderListRelationFilter
  status: StatusListRelationFilter
  item: ItemListRelationFilter
  statusItem: StatusItemListRelationFilter
  comment: CommentListRelationFilter
  commentItem: CommentItemListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input EnumGenderFilter {
  equals: Gender
  in: [Gender!]
  notIn: [Gender!]
  not: NestedEnumGenderFilter
}

input NestedEnumGenderFilter {
  equals: Gender
  in: [Gender!]
  notIn: [Gender!]
  not: NestedEnumGenderFilter
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input FileListRelationFilter {
  every: FileWhereInput
  some: FileWhereInput
  none: FileWhereInput
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IntFilter
  name: StringFilter
  serverUrl: StringFilter
  bucket: StringFilter
  key: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userId: IntNullableFilter
  user: UserRelationFilter
  products: ProductListRelationFilter
}

input ProductListRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IntFilter
  vendorCode: StringFilter
  name: StringNullableFilter
  manufacturer: StringNullableFilter
  aliases: StringNullableFilter
  original: BoolFilter
  stock: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  prices: PriceListRelationFilter
  attributes: AttributeValueListRelationFilter
  item: ItemListRelationFilter
  images: FileListRelationFilter
}

input PriceListRelationFilter {
  every: PriceWhereInput
  some: PriceWhereInput
  none: PriceWhereInput
}

input PriceWhereInput {
  AND: [PriceWhereInput!]
  OR: [PriceWhereInput!]
  NOT: [PriceWhereInput!]
  id: IntFilter
  price: DecimalFilter
  duration: StringNullableFilter
  supplierName: StringFilter
  country: StringNullableFilter
  site: StringNullableFilter
  comment: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  validAt: DateTimeNullableFilter
  productId: IntFilter
  product: ProductRelationFilter
  item: ItemListRelationFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalFilter
}

input NestedDecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalFilter
}

input ProductRelationFilter {
  is: ProductWhereInput
  isNot: ProductWhereInput
}

input ItemListRelationFilter {
  every: ItemWhereInput
  some: ItemWhereInput
  none: ItemWhereInput
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  id: IntFilter
  quantity: IntFilter
  carNo: StringNullableFilter
  routeNo: StringNullableFilter
  deliveryType: EnumDeliveryTypeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  orderId: IntFilter
  productId: IntFilter
  priceId: IntNullableFilter
  userId: IntNullableFilter
  order: OrderRelationFilter
  product: ProductRelationFilter
  price: PriceRelationFilter
  user: UserRelationFilter
  statuses: StatusItemListRelationFilter
  commentItem: CommentItemListRelationFilter
}

input EnumDeliveryTypeNullableFilter {
  equals: DeliveryType
  in: [DeliveryType!]
  notIn: [DeliveryType!]
  not: NestedEnumDeliveryTypeNullableFilter
}

input NestedEnumDeliveryTypeNullableFilter {
  equals: DeliveryType
  in: [DeliveryType!]
  notIn: [DeliveryType!]
  not: NestedEnumDeliveryTypeNullableFilter
}

input OrderRelationFilter {
  is: OrderWhereInput
  isNot: OrderWhereInput
}

input PriceRelationFilter {
  is: PriceWhereInput
  isNot: PriceWhereInput
}

input StatusItemListRelationFilter {
  every: StatusItemWhereInput
  some: StatusItemWhereInput
  none: StatusItemWhereInput
}

input StatusItemWhereInput {
  AND: [StatusItemWhereInput!]
  OR: [StatusItemWhereInput!]
  NOT: [StatusItemWhereInput!]
  id: IntFilter
  status: EnumItemStatusFilter
  createdAt: DateTimeFilter
  itemId: IntFilter
  userId: IntNullableFilter
  item: ItemRelationFilter
  user: UserRelationFilter
}

input EnumItemStatusFilter {
  equals: ItemStatus
  in: [ItemStatus!]
  notIn: [ItemStatus!]
  not: NestedEnumItemStatusFilter
}

input NestedEnumItemStatusFilter {
  equals: ItemStatus
  in: [ItemStatus!]
  notIn: [ItemStatus!]
  not: NestedEnumItemStatusFilter
}

input ItemRelationFilter {
  is: ItemWhereInput
  isNot: ItemWhereInput
}

input CommentItemListRelationFilter {
  every: CommentItemWhereInput
  some: CommentItemWhereInput
  none: CommentItemWhereInput
}

input CommentItemWhereInput {
  AND: [CommentItemWhereInput!]
  OR: [CommentItemWhereInput!]
  NOT: [CommentItemWhereInput!]
  id: IntFilter
  text: StringFilter
  createdAt: DateTimeFilter
  itemId: IntFilter
  userId: IntNullableFilter
  parentId: IntNullableFilter
  item: ItemRelationFilter
  user: UserRelationFilter
  comment: CommentItemRelationFilter
  comments: CommentItemListRelationFilter
}

input CommentItemRelationFilter {
  is: CommentItemWhereInput
  isNot: CommentItemWhereInput
}

input AttributeValueListRelationFilter {
  every: AttributeValueWhereInput
  some: AttributeValueWhereInput
  none: AttributeValueWhereInput
}

input AttributeValueWhereInput {
  AND: [AttributeValueWhereInput!]
  OR: [AttributeValueWhereInput!]
  NOT: [AttributeValueWhereInput!]
  id: IntFilter
  value: StringFilter
  createdAt: DateTimeFilter
  productId: IntFilter
  attributeId: IntFilter
  product: ProductRelationFilter
  attribute: AttributeRelationFilter
}

input AttributeRelationFilter {
  is: AttributeWhereInput
  isNot: AttributeWhereInput
}

input AttributeWhereInput {
  AND: [AttributeWhereInput!]
  OR: [AttributeWhereInput!]
  NOT: [AttributeWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  products: AttributeValueListRelationFilter
}

input OrderListRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input StatusListRelationFilter {
  every: StatusWhereInput
  some: StatusWhereInput
  none: StatusWhereInput
}

input StatusWhereInput {
  AND: [StatusWhereInput!]
  OR: [StatusWhereInput!]
  NOT: [StatusWhereInput!]
  id: IntFilter
  status: EnumOrderStatusFilter
  createdAt: DateTimeFilter
  orderId: IntFilter
  userId: IntNullableFilter
  order: OrderRelationFilter
  user: UserRelationFilter
}

input EnumOrderStatusFilter {
  equals: OrderStatus
  in: [OrderStatus!]
  notIn: [OrderStatus!]
  not: NestedEnumOrderStatusFilter
}

input NestedEnumOrderStatusFilter {
  equals: OrderStatus
  in: [OrderStatus!]
  notIn: [OrderStatus!]
  not: NestedEnumOrderStatusFilter
}

input CommentListRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IntFilter
  text: StringFilter
  createdAt: DateTimeFilter
  orderId: IntFilter
  userId: IntNullableFilter
  parentId: IntNullableFilter
  order: OrderRelationFilter
  user: UserRelationFilter
  comment: CommentRelationFilter
  comments: CommentListRelationFilter
}

input CommentRelationFilter {
  is: CommentWhereInput
  isNot: CommentWhereInput
}

input OrderOrderByWithRelationInput {
  id: SortOrder
  address: SortOrder
  createdAt: SortOrder
  userId: SortOrder
  managerId: SortOrder
  user: UserOrderByWithRelationInput
  manager: UserOrderByWithRelationInput
  statuses: StatusOrderByRelationAggregateInput
  item: ItemOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input UserOrderByWithRelationInput {
  id: SortOrder
  username: SortOrder
  password: SortOrder
  email: SortOrder
  avatar: SortOrder
  lastName: SortOrder
  firstName: SortOrder
  sirName: SortOrder
  active: SortOrder
  phone: SortOrder
  birthday: SortOrder
  role: SortOrder
  gender: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  managerId: SortOrder
  manager: UserOrderByWithRelationInput
  users: UserOrderByRelationAggregateInput
  files: FileOrderByRelationAggregateInput
  orders: OrderOrderByRelationAggregateInput
  manageOrders: OrderOrderByRelationAggregateInput
  status: StatusOrderByRelationAggregateInput
  item: ItemOrderByRelationAggregateInput
  statusItem: StatusItemOrderByRelationAggregateInput
  comment: CommentOrderByRelationAggregateInput
  commentItem: CommentItemOrderByRelationAggregateInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input FileOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input StatusOrderByRelationAggregateInput {
  _count: SortOrder
}

input ItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input StatusItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderWhereUniqueInput {
  id: Int
}

enum OrderScalarFieldEnum {
  id
  address
  createdAt
  userId
  managerId
}

type Mutation {
  login(userLoginInput: UserLoginInput!): UserLoginType!
  register(userRegisterInput: UserRegisterInput!): UserLoginType
  uploadAvatar(fileUpload: FileUploadInput!): User!
  createOrder(order: CreateOrderInput!): CreateOrderType!
}

input UserLoginInput {
  username: String!
  password: String!
}

input UserRegisterInput {
  username: String!
  password: String!
  email: EmailAddress!
  lastName: String!
  firstName: String!
  sirName: String

  """Date of birthday """
  birthday: DateTime
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

input FileUploadInput {
  fileName: String!
  bucket: String!
  name: String!
}

input CreateOrderInput {
  address: String
  file: FileUploadInput!
}