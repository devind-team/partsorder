version: '3.9'

x-secret-common-variables: &secret-common-variables
  SECRET_KEY: "${SECRET_KEY}"
  NC_AUTH_JWT_SECRET: "${SECRET_KEY}"

x-client-environment: &client-environment
  NUXT_API_URL: "https://${SITE}/graphql/"
  NUX_API_URL_BROWSER: "http://server:8000/graphql/"
  NUXT_WS_URL_BROWSER: "wss://${SITE}/graphql/"
  NUXT_MINIO_EXTERNAL: "${MINIO_EXTERNAL_URL}"

x-postgres-variables: &postgres-variables
  POSTGRES_DB: "${DB_NAME}"
  POSTGRES_USER: "${DB_USER}"
  POSTGRES_PASSWORD: "${DB_PASSWORD}"

x-database-variables: &database-variables
  DB_USER: "${DB_USER}"
  DB_PASSWORD: "${DB_PASSWORD}"
  DB_HOST: "${DB_HOST}"
  DB_PORT: "${DB_PORT}"
  DB_NAME: "${DB_NAME}"
  DATABASE_URL: "postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}"

x-smtp-variables: &smtp-variables
  SMTP_FROM: "${SMTP_FROM}"
  SMTP_HOST: "${SMTP_HOST}"
  SMTP_PORT: "${SMTP_PORT}"
  SMTP_USERNAME: "${SMTP_USERNAME}"
  SMTP_PASSWORD: "${SMTP_PASSWORD}"
  SMTP_SECURE: "${SMTP_SECURE}"
  SMTP_IGNORE_TLS: "${SMTP_IGNORE_TLS}"

x-nocodb-variables: &nocodb-variables
  NC_ADMIN_EMAIL: "${NC_ADMIN_EMAIL}"
  NC_ADMIN_PASSWORD: "${NC_ADMIN_PASSWORD}"
  NC_DB: "pg://${NC_DB_HOST}:${DB_PORT}?u=${NC_DB_USER}&p=${NC_DB_PASSWORD}&d=${NC_DB_NAME}"
  NC_PUBLIC_URL: "https://nocodb.${SITE}"
  NC_DISABLE_TELE: true
  NC_REDIS_URL: "${REDIS_URL}"
  NC_SMTP_FROM: "${SMTP_FROM}"
  NC_SMTP_HOST: "${SMTP_HOST}"
  NC_SMTP_PORT: "${SMTP_PORT}"
  NC_SMTP_USERNAME: "${SMTP_USERNAME}"
  NC_SMTP_PASSWORD: "${SMTP_PASSWORD}"
  NC_SMTP_SECURE: "${SMTP_SECURE}"
  NC_SMTP_IGNORE_TLS: "${SMTP_IGNORE_TLS}"

  # NC_S3_BUCKET_NAME: "${NC_S3_BUCKET_NAME}"
  # NC_S3_REGION: "${NC_S3_REGION}" # default us-east-1.
  # NC_S3_ACCESS_KEY: "${MINIO_ROOT_USER}"
  # NC_S3_ACCESS_SECRET: "${MINIO_ROOT_PASSWORD}"

x-nocodb-db-variables: &nocodb-db-variables
  POSTGRES_DB: "${NC_DB_NAME}"
  POSTGRES_USER: "${NC_DB_USER}"
  POSTGRES_PASSWORD: "${NC_DB_PASSWORD}"

x-grafana-environment: &grafana-environment
  GF_SECURITY_ADMIN_USER: "${GF_SECURITY_ADMIN_USER}"
  GF_SECURITY_ADMIN_PASSWORD: "${GF_SECURITY_ADMIN_PASSWORD}"
  GF_USERS_ALLOW_SIGN_UP: "${GF_USERS_ALLOW_SIGN_UP}"

x-minio-variables: &minio-variables
  MINIO_SERVER_URL: "${MINIO_SERVER_URL}"
  MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
  MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
  MINIO_END_POINT: "${MINIO_END_POINT}"
  MINIO_PORT: "${MINIO_PORT}"
  MINIO_BUCKET: "${MINIO_BUCKET}"

x-server-environment: &server-environment
  <<: [*secret-common-variables, *database-variables, *minio-variables, *smtp-variables]
  MINIO_END_POINT: "minio"
  MINIO_USE_SSL: "${MINIO_USE_SSL}"
  REDIS_URL: "${REDIS_URL}"

networks:
  traefik_proxy:
    name: traefik_proxy

services:
  traefik:
    container_name: traefik-partsorder
    image: traefik:v2.9
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traefik_proxy"

      - "--entryPoints.http.address=:80"
      - "--entryPoints.https.address=:443"

      - "--entryPoints.https.http.tls.certresolver=letsencrypt"
      - "--entryPoints.https.http.tls.domains[0].main=${SITE}"
      - "--entryPoints.https.http.tls.domains[0].sans=*.${SITE}"
      - "--entryPoints.http.http.redirections.entryPoint.to=https"
      - "--entryPoints.http.http.redirections.entryPoint.scheme=https"
      - "--certificatesResolvers.letsencrypt.acme.email=info@${SITE}"
      - "--certificatesResolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesResolvers.letsencrypt.acme.certificatesDuration=2160"
      - "--certificatesResolvers.letsencrypt.acme.preferredchain='ISRG Root X1'"
      - "--certificatesResolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesResolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesResolvers.letsencrypt.acme.httpChallenge.entryPoint=web"
    restart: always
    security_opt:
      - no-new-privileges:true
    networks:
      - default
      - traefik_proxy
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "letsencrypt:/letsencrypt"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=https"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${SITE}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIC_ADMIN}"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.services.traefik-traefik.loadbalancer.server.port=8080"

  client:
    container_name: client-partsorder
    build: ./client
    restart: always
    depends_on:
      - server
    environment:
      <<: *client-environment
    networks:
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.client.loadbalancer.server.port=3000"
      - "traefik.http.routers.client.service=client"
      - "traefik.http.routers.client.rule=Host(`${SITE}`)"
      - "traefik.http.routers.client.entrypoints=https"
      - "traefik.http.routers.client.tls=true"
      - "traefik.http.routers.client.tls.certresolver=letsencrypt"
      - "com.centurylinklabs.watchtower.enable=true"

  server:
    container_name: server-partsorder
    build: ./server
    restart: always
    depends_on:
      - postgres
    environment:
      <<: *server-environment
    networks:
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.server.loadbalancer.server.port=8000"
      - "traefik.http.routers.server.service=server"
      - "traefik.http.routers.server.rule=Host(`${SITE}`) && Path(`/graphql`)"
      - "traefik.http.routers.server.entrypoints=https"
      - "traefik.http.routers.server.tls=true"
      - "traefik.http.routers.server.tls.certresolver=letsencrypt"
      - "com.centurylinklabs.watchtower.enable=true"

  server-migration:
    container_name: server-migration-partsorder
    build: ./server
    command: "npm run migrate:prod"
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      <<: *server-environment
    networks:
      - traefik_proxy
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  nocodb:
    container_name: nocodb-partsorder
    image: "nocodb/nocodb:latest"
    restart: always
    depends_on:
      - nocodb-db
    environment:
      <<: *nocodb-variables
      <<: *secret-common-variables
    networks:
      - traefik_proxy
    volumes:
      - "nocodb-data:/usr/app/data"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.nocodb.loadbalancer.server.port=8080"
      - "traefik.http.routers.nocodb.service=nocodb"
      - "traefik.http.routers.nocodb.rule=Host(`nocodb.${SITE}`)"
      - "traefik.http.routers.nocodb.entrypoints=https"
      - "traefik.http.routers.nocodb.tls=true"
      - "traefik.http.routers.nocodb.tls.certresolver=letsencrypt"
      - "com.centurylinklabs.watchtower.enable=true"

  nocodb-db:
    container_name: nocodb-db-partsorder
    image: postgres:15.2
    restart: always
    environment:
      <<: *nocodb-db-variables
    networks:
      - default
      - traefik_proxy
    ports:
      - "${NC_DB_PORT}:5432"
    volumes:
      - 'nocodb-db:/var/lib/postgresql/data'
    healthcheck:
      interval: 10s
      retries: 10
      test: "pg_isready -U ${NC_DB_USER} -d ${NC_DB_NAME}"
      timeout: 2s

  grafana:
    container_name: grafana-partsorder
    image: grafana/grafana:latest
    restart: always
    environment:
      <<: *grafana-environment
    networks:
      - traefik_proxy
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.service=grafana"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${SITE}`)"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.routers.grafana.entrypoints=https"

  postgres:
    container_name: postgres-partsorder
    image: postgres:15.2
    restart: always
    environment:
      <<: *postgres-variables
    networks:
      - default
      - traefik_proxy
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - 'database:/var/lib/postgresql/data'
    healthcheck:
      interval: 10s
      retries: 10
      test: "pg_isready -U ${DB_USER} -d ${DB_NAME}"
      timeout: 2s

  minio:
    container_name: minio-partsorder
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      <<: *minio-variables
    ports:
      - "9000:9000"
    networks:
      - traefik_proxy
    volumes:
      - 'minio:/data'
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.minio.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio.service=minio"
      - "traefik.http.routers.minio.rule=Host(`${SITE}`) && Path(`/storage`)"
      - "traefik.http.routers.minio.tls.certresolver=letsencrypt"
      - "traefik.http.routers.minio.entrypoints=https"

      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
      - "traefik.http.routers.minio-console.service=minio-console"
      - "traefik.http.routers.minio-console.rule=Host(`minio.${SITE}`)"
      - "traefik.http.routers.minio-console.tls=true"
      - "traefik.http.routers.minio-console.entrypoints=https"
      - "traefik.http.routers.minio-console.tls.certresolver=letsencrypt"
      - "com.centurylinklabs.watchtower.enable=true"

  minio-client:
    container_name: minio-client-partsorder
    image: minio/mc
    restart: unless-stopped
    entrypoint: ['/bin/sh', '-c']
    command:
      - |
        mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}
        mc mb --ignore-existing local/${MINIO_BUCKET}
        mc anonymous set download local/${MINIO_BUCKET}
    networks:
      - traefik_proxy
    depends_on:
      - minio

  portainer:
    container_name: portainer-partsorder
    image: portainer/portainer-ce:latest
    restart: always
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer:/data"
    networks:
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.service=portainer"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${SITE}`)"
      - "traefik.http.routers.portainer.entrypoints=https"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"
      - "com.centurylinklabs.watchtower.enable=true"

  watchtower:
    command: "--schedule \"0 5 * * *\" --cleanup --label-enable"
    container_name: watchtower-partsorder
    image: containrrr/watchtower
    restart: always
    networks:
      - traefik_proxy
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  redis:
    container_name: redis-partsorder
    image: redis:latest
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - '6379:6379'
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    healthcheck:
      test: ["CMD", "redis-cli","ping"]

volumes:
  minio:
    name: minio
  letsencrypt:
    name: traefik-letsencrypt
  database:
    name: database
  portainer:
    name: portainer
  nocodb-data:
    name: nocodb-data
  nocodb-db:
    name: nocodb-db
